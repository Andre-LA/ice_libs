##[[
  cdefine "ICE_AL_IMPL"
  cinclude "ice_al.h"
  
  if ccinfo.is_windows and not ccinfo.is_msc then
    linklib "kernel32"
  elseif ccinfo.is_linux or ccinfo.is_bsd then
    linklib "dl"
  end
]]

-- ============================= Data Types (OpenAL API) ============================= --

global ALboolean: type <cimport, nodecl> = @cchar
global ALchar: type <cimport, nodecl> = @cchar
global ALbyte: type <cimport, nodecl> = @cschar
global ALubyte: type <cimport, nodecl> = @cuchar
global ALshort: type <cimport, nodecl> = @cshort
global ALushort: type <cimport, nodecl> = @cushort
global ALint: type <cimport, nodecl> = @cint
global ALuint: type <cimport, nodecl> = @cuint
global ALsizei: type <cimport, nodecl> = @cint
global ALenum: type <cimport, nodecl> = @cint
global ALfloat: type <cimport, nodecl> = @float32
global ALdouble: type <cimport, nodecl> = @float64
global ALvoid: type <cimport, nodecl> = @void

global ALCdevice: type <cimport, nodecl, forwarddecl> = @record {}
global ALCcontext: type <cimport, nodecl, forwarddecl> = @record {}
global ALCboolean: type <cimport, nodecl> = @cchar
global ALCchar: type <cimport, nodecl> = @cchar
global ALCbyte: type <cimport, nodecl> = @cschar
global ALCubyte: type <cimport, nodecl> = @cuchar
global ALCshort: type <cimport, nodecl> = @cshort
global ALCushort: type <cimport, nodecl> = @cushort
global ALCint: type <cimport, nodecl> = @cint
global ALCuint: type <cimport, nodecl> = @cuint
global ALCsizei: type <cimport, nodecl> = @cint
global ALCenum: type <cimport, nodecl> = @cint
global ALCfloat: type <cimport, nodecl> = @float32
global ALCdouble: type <cimport, nodecl> = @float64
global ALCvoid: type <cimport, nodecl> = @void

-- ============================= Definitions (OpenAL API) ============================= --

global AL_NONE: cint <cimport, nodecl, const>
global AL_FALSE: cint <cimport, nodecl, const>
global AL_TRUE: cint <cimport, nodecl, const>
global AL_SOURCE_RELATIVE: cint <cimport, nodecl, const>
global AL_CONE_INNER_ANGLE: cint <cimport, nodecl, const>
global AL_CONE_OUTER_ANGLE: cint <cimport, nodecl, const>
global AL_PITCH: cint <cimport, nodecl, const>
global AL_POSITION: cint <cimport, nodecl, const>
global AL_DIRECTION: cint <cimport, nodecl, const>
global AL_VELOCITY: cint <cimport, nodecl, const>
global AL_LOOPING: cint <cimport, nodecl, const>
global AL_BUFFER: cint <cimport, nodecl, const>
global AL_GAIN: cint <cimport, nodecl, const>
global AL_MIN_GAIN: cint <cimport, nodecl, const>
global AL_MAX_GAIN: cint <cimport, nodecl, const>
global AL_ORIENTATION: cint <cimport, nodecl, const>
global AL_SOURCE_STATE: cint <cimport, nodecl, const>
global AL_INITIAL: cint <cimport, nodecl, const>
global AL_PLAYING: cint <cimport, nodecl, const>
global AL_PAUSED: cint <cimport, nodecl, const>
global AL_STOPPED: cint <cimport, nodecl, const>
global AL_BUFFERS_QUEUED: cint <cimport, nodecl, const>
global AL_BUFFERS_PROCESSED: cint <cimport, nodecl, const>
global AL_REFERENCE_DISTANCE: cint <cimport, nodecl, const>
global AL_ROLLOFF_FACTOR: cint <cimport, nodecl, const>
global AL_CONE_OUTER_GAIN: cint <cimport, nodecl, const>
global AL_MAX_DISTANCE: cint <cimport, nodecl, const>
global AL_SEC_OFFSET: cint <cimport, nodecl, const>
global AL_SAMPLE_OFFSET: cint <cimport, nodecl, const>
global AL_BYTE_OFFSET: cint <cimport, nodecl, const>
global AL_SOURCE_TYPE: cint <cimport, nodecl, const>
global AL_STATIC: cint <cimport, nodecl, const>
global AL_STREAMING: cint <cimport, nodecl, const>
global AL_UNDETERMINED: cint <cimport, nodecl, const>
global AL_FORMAT_MONO8: cint <cimport, nodecl, const>
global AL_FORMAT_MONO16: cint <cimport, nodecl, const>
global AL_FORMAT_STEREO8: cint <cimport, nodecl, const>
global AL_FORMAT_STEREO16: cint <cimport, nodecl, const>
global AL_FREQUENCY: cint <cimport, nodecl, const>
global AL_BITS: cint <cimport, nodecl, const>
global AL_CHANNELS: cint <cimport, nodecl, const>
global AL_SIZE: cint <cimport, nodecl, const>
global AL_UNUSED: cint <cimport, nodecl, const>
global AL_PENDING: cint <cimport, nodecl, const>
global AL_PROCESSED: cint <cimport, nodecl, const>
global AL_NO_ERROR: cint <cimport, nodecl, const>
global AL_INVALID_NAME: cint <cimport, nodecl, const>
global AL_INVALID_ENUM: cint <cimport, nodecl, const>
global AL_INVALID_VALUE: cint <cimport, nodecl, const>
global AL_INVALID_OPERATION: cint <cimport, nodecl, const>
global AL_OUT_OF_MEMORY: cint <cimport, nodecl, const>
global AL_VENDOR: cint <cimport, nodecl, const>
global AL_VERSION: cint <cimport, nodecl, const>
global AL_RENDERER: cint <cimport, nodecl, const>
global AL_EXTENSIONS: cint <cimport, nodecl, const>
global AL_DOPPLER_FACTOR: cint <cimport, nodecl, const>
global AL_DOPPLER_VELOCITY: cint <cimport, nodecl, const>
global AL_SPEED_OF_SOUND: cint <cimport, nodecl, const>
global AL_DISTANCE_MODEL: cint <cimport, nodecl, const>
global AL_INVERSE_DISTANCE: cint <cimport, nodecl, const>
global AL_INVERSE_DISTANCE_CLAMPED: cint <cimport, nodecl, const>
global AL_LINEAR_DISTANCE: cint <cimport, nodecl, const>
global AL_LINEAR_DISTANCE_CLAMPED: cint <cimport, nodecl, const>
global AL_EXPONENT_DISTANCE: cint <cimport, nodecl, const>
global AL_EXPONENT_DISTANCE_CLAMPED: cint <cimport, nodecl, const>

global ALC_VERSION_0_1: cint <cimport, nodecl, const>
global ALC_INVALID: cint <cimport, nodecl, const>
global ALC_FALSE: cint <cimport, nodecl, const>
global ALC_TRUE: cint <cimport, nodecl, const>
global ALC_FREQUENCY: cint <cimport, nodecl, const>
global ALC_REFRESH: cint <cimport, nodecl, const>
global ALC_SYNC: cint <cimport, nodecl, const>
global ALC_MONO_SOURCES: cint <cimport, nodecl, const>
global ALC_STEREO_SOURCES: cint <cimport, nodecl, const>
global ALC_NO_ERROR: cint <cimport, nodecl, const>
global ALC_INVALID_DEVICE: cint <cimport, nodecl, const>
global ALC_INVALID_CONTEXT: cint <cimport, nodecl, const>
global ALC_INVALID_ENUM: cint <cimport, nodecl, const>
global ALC_INVALID_VALUE: cint <cimport, nodecl, const>
global ALC_OUT_OF_MEMORY: cint <cimport, nodecl, const>
global ALC_MAJOR_VERSION: cint <cimport, nodecl, const>
global ALC_MINOR_VERSION: cint <cimport, nodecl, const>
global ALC_ATTRIBUTES_SIZE: cint <cimport, nodecl, const>
global ALC_ALL_ATTRIBUTES: cint <cimport, nodecl, const>
global ALC_DEFAULT_DEVICE_SPECIFIER: cint <cimport, nodecl, const>
global ALC_DEVICE_SPECIFIER: cint <cimport, nodecl, const>
global ALC_EXTENSIONS: cint <cimport, nodecl, const>
global ALC_EXT_CAPTURE: cint <cimport, nodecl, const>
global ALC_CAPTURE_DEVICE_SPECIFIER: cint <cimport, nodecl, const>
global ALC_CAPTURE_DEFAULT_DEVICE_SPECIFIER: cint <cimport, nodecl, const>
global ALC_CAPTURE_SAMPLES: cint <cimport, nodecl, const>
global ALC_ENUMERATE_ALL_EXT: cint <cimport, nodecl, const>
global ALC_DEFAULT_ALL_DEVICES_SPECIFIER: cint <cimport, nodecl, const>
global ALC_ALL_DEVICES_SPECIFIER: cint <cimport, nodecl, const>

-- ============================= Functions (OpenAL API) ============================= --

global function alDopplerFactor(value: ALfloat): void <cimport, nodecl> end
global function alSpeedOfSound(value: ALfloat): void <cimport, nodecl> end
global function alDistanceModel(distanceModel: ALenum): void <cimport, nodecl> end
global function alEnable(capability: ALenum): void <cimport, nodecl> end
global function alDisable(capability: ALenum): void <cimport, nodecl> end
global function alIsEnabled(capability: ALenum): ALboolean <cimport, nodecl> end
global function alGetString(param: ALenum): *ALchar <cimport, nodecl> end
global function alGetBooleanv(param: ALenum, values: *[0]ALboolean): void <cimport, nodecl> end
global function alGetIntegerv(param: ALenum, values: *[0]ALint): void <cimport, nodecl> end
global function alGetFloatv(param: ALenum, values: *[0]ALfloat): void <cimport, nodecl> end
global function alGetDoublev(param: ALenum, values: *[0]ALdouble): void <cimport, nodecl> end
global function alGetBoolean(param: ALenum): ALboolean <cimport, nodecl> end
global function alGetInteger(param: ALenum): ALint <cimport, nodecl> end
global function alGetFloat(param: ALenum): ALfloat <cimport, nodecl> end
global function alGetDouble(param: ALenum): ALdouble <cimport, nodecl> end
global function alGetError(): ALenum <cimport, nodecl> end
global function alIsExtensionPresent(extname: *ALchar <const>): ALboolean <cimport, nodecl> end
global function alGetProcAddress(fname: *ALchar <const>): pointer <cimport, nodecl> end
global function alGetEnumValue(ename:  *ALchar <const>): ALenum <cimport, nodecl> end
global function alListenerf(param: ALenum, value: ALfloat): void <cimport, nodecl> end
global function alListener3f(param: ALenum, value1: ALfloat, value2: ALfloat, value3: ALfloat): void <cimport, nodecl> end
global function alListenerfv(param: ALenum, values: *[0]ALfloat <const>): void <cimport, nodecl> end
global function alListeneri(param: ALenum, value: ALint): void <cimport, nodecl> end
global function alListener3i(param: ALenum, value1: ALint, value2: ALint, value3: ALint): void <cimport, nodecl> end
global function alListeneriv(param: ALenum, values: *[0]ALint <const>): void <cimport, nodecl> end
global function alGetListenerf(param: ALenum, value: *ALfloat): void <cimport, nodecl> end
global function alGetListener3f(param: ALenum, value1: *ALfloat, value2: *ALfloat, value3: *ALfloat): void <cimport, nodecl> end
global function alGetListenerfv(param: ALenum, values: *ALfloat): void <cimport, nodecl> end
global function alGetListeneri(param: ALenum, value: *ALint): void <cimport, nodecl> end
global function alGetListener3i(param: ALenum, value1: *ALint, value2: *ALint, value3: *ALint): void <cimport, nodecl> end
global function alGetListeneriv(param: ALenum, values: *ALint): void <cimport, nodecl> end
global function alGenSources(n: ALsizei, sources: *ALuint): void <cimport, nodecl> end
global function alDeleteSources(n: ALsizei, sources: *ALuint <const>): void <cimport, nodecl> end
global function alIsSource(source: ALuint): ALboolean <cimport, nodecl> end
global function alSourcef(source: ALuint, param: ALenum, value: ALfloat): void <cimport, nodecl> end
global function alSource3f(source: ALuint, param: ALenum, value1: ALfloat, value2: ALfloat, value3: ALfloat): void <cimport, nodecl> end
global function alSourcefv(source: ALuint, param: ALenum, values: *ALfloat <const>): void <cimport, nodecl> end
global function alSourcei(source: ALuint, param: ALenum, value: ALint): void <cimport, nodecl> end
global function alSource3i(source: ALuint, param: ALenum, value1: ALint, value2: ALint, value3: ALint): void <cimport, nodecl> end
global function alSourceiv(source: ALuint, param: ALenum, values: *ALint <const>): void <cimport, nodecl> end
global function alGetSourcef(source: ALuint, param: ALenum, value: *ALfloat): void <cimport, nodecl> end
global function alGetSource3f(source: ALuint, param: ALenum, value1: *ALfloat, value2: *ALfloat, value3: *ALfloat): void <cimport, nodecl> end
global function alGetSourcefv(source: ALuint, param: ALenum, values: *ALfloat): void <cimport, nodecl> end
global function alGetSourcei(source: ALuint, param: ALenum, value: *ALint): void <cimport, nodecl> end
global function alGetSource3i(source: ALuint, param: ALenum, value1: *ALint, value2: *ALint, value3: *ALint): void <cimport, nodecl> end
global function alGetSourceiv(source: ALuint, param: ALenum, values: *ALint): void <cimport, nodecl> end
global function alSourcePlayv(n: ALsizei, sources: *ALuint <const>): void <cimport, nodecl> end
global function alSourceStopv(n: ALsizei, sources: *ALuint <const>): void <cimport, nodecl> end
global function alSourceRewindv(n: ALsizei, sources: *ALuint <const>): void <cimport, nodecl> end
global function alSourcePausev(n: ALsizei, sources: *ALuint <const>): void <cimport, nodecl> end
global function alSourcePlay(source: ALuint): void <cimport, nodecl> end
global function alSourceStop(source: ALuint): void <cimport, nodecl> end
global function alSourceRewind(source: ALuint): void <cimport, nodecl> end
global function alSourcePause(source: ALuint): void <cimport, nodecl> end
global function alSourceQueueBuffers(source: ALuint, nb: ALsizei, buffers: *ALuint <const>): void <cimport, nodecl> end
global function alSourceUnqueueBuffers(source: ALuint, nb: ALsizei, buffers: *ALuint): void <cimport, nodecl> end
global function alGenBuffers(n: ALsizei, buffers: *ALuint): void <cimport, nodecl> end
global function alDeleteBuffers(n: ALsizei, buffers: *ALuint <const>): void <cimport, nodecl> end
global function alIsBuffer(buffer: ALuint): ALboolean <cimport, nodecl> end
global function alBufferData(buffer: ALuint, format: ALenum, data: pointer <const>, size: ALsizei, freq: ALsizei): void <cimport, nodecl> end
global function alBufferf(buffer: ALuint, param: ALenum, value: ALfloat): void <cimport, nodecl> end
global function alBuffer3f(buffer: ALuint, param: ALenum, value1: ALfloat, value2: ALfloat, value3: ALfloat): void <cimport, nodecl> end
global function alBufferfv(buffer: ALuint, param: ALenum, values: *ALfloat <const>): void <cimport, nodecl> end
global function alBufferi(buffer: ALuint, param: ALenum, value: ALint): void <cimport, nodecl> end
global function alBuffer3i(buffer: ALuint, param: ALenum, value1: ALint, value2: ALint, value3: ALint): void <cimport, nodecl> end
global function alBufferiv(buffer: ALuint, param: ALenum, values: *ALint <const>): void <cimport, nodecl> end
global function alGetBufferf(buffer: ALuint, param: ALenum, value: *ALfloat): void <cimport, nodecl> end
global function alGetBuffer3f(buffer: ALuint, param: ALenum, value1: *ALfloat, value2: *ALfloat, value3: *ALfloat): void <cimport, nodecl> end
global function alGetBufferfv(buffer: ALuint, param: ALenum, values: *ALfloat): void <cimport, nodecl> end
global function alGetBufferi(buffer: ALuint, param: ALenum, value: *ALint): void <cimport, nodecl> end
global function alGetBuffer3i(buffer: ALuint, param: ALenum, value1: *ALint, value2: *ALint, value3: *ALint): void <cimport, nodecl> end
global function alGetBufferiv(buffer: ALuint, param: ALenum, values: *ALint): void <cimport, nodecl> end

global function alcCreateContext(device: *ALCdevice, attrlist: *ALCint <const>): *ALCcontext <cimport, nodecl> end
global function alcMakeContextCurrent(context: *ALCcontext): ALCboolean <cimport, nodecl> end
global function alcProcessContext(context: *ALCcontext): void <cimport, nodecl> end
global function alcSuspendContext(context: *ALCcontext): void <cimport, nodecl> end
global function alcDestroyContext(context: *ALCcontext): void <cimport, nodecl> end
global function alcGetCurrentContext(): *ALCcontext <cimport, nodecl> end
global function alcGetContextsDevice(context: *ALCcontext): *ALCdevice <cimport, nodecl> end
global function alcOpenDevice(devicename: *ALCchar <const>): *ALCdevice <cimport, nodecl> end
global function alcCloseDevice(device: *ALCdevice): ALCboolean <cimport, nodecl> end
global function alcGetError(device: *ALCdevice): ALCenum <cimport, nodecl> end
global function alcIsExtensionPresent(device: *ALCdevice, extname: *ALCchar <const>): ALCboolean <cimport, nodecl> end
global function alcGetProcAddress(device: *ALCdevice, funcname: *ALCchar <const>): *ALCvoid <cimport, nodecl> end
global function alcGetEnumValue(device: *ALCdevice, enumname: *ALCchar <const>): ALCenum <cimport, nodecl> end
global function alcGetString(device: *ALCdevice, param: ALenum): *ALCchar <cimport, nodecl> end
global function alcGetIntegerv(device: *ALCdevice, param: ALCenum, size: ALCsizei, values: *ALCint): void <cimport, nodecl> end
global function alcCaptureOpenDevice(devicename: *ALCchar <const>, frequency: ALCuint, format: ALCenum, buffersize: ALCsizei): *ALCdevice <cimport, nodecl> end
global function alcCaptureCloseDevice(device: *ALCdevice): ALCboolean <cimport, nodecl> end
global function alcCaptureStart(device: *ALCdevice): void <cimport, nodecl> end
global function alcCaptureStop(device: *ALCdevice): void <cimport, nodecl> end
global function alcCaptureSamples(device: *ALCdevice, buffer: *ALCvoid, samples: ALCsizei): void <cimport, nodecl> end

-- ============================= Data Types ============================= --

-- Handle, Type definition for void* for symbols loaded from shared libs
global ice_al_handle: type <cimport, nodecl> = @pointer

-- Boolean Enum, To avoid including stdbool.h
global ice_al_bool: type <cimport, nodecl, using> = @enum(cint) {
  ICE_AL_FALSE = -1,
  ICE_AL_TRUE = 0
}

-- ============================= Functions ============================= --

-- [INTERNAL] Loads symbol from loaded OpenAL shared library, Which can be casted to a function to call
global function ice_al_proc(symbol: cstring <const>): ice_al_handle <cimport, nodecl> end

-- Loads OpenAL API from shared library path (ex. openal32.dll on Windows), Returns ICE_AL_TRUE on success or ICE_AL_FALSE on failure
global function ice_al_load(path: cstring <const>): ice_al_bool <cimport, nodecl> end

-- Unloads OpenAL API, Returns ICE_AL_TRUE on success or ICE_AL_FALSE on failure
global function ice_al_unload(): ice_al_bool <cimport, nodecl> end
