#[[
  cdefine "ICE_EASINGS_IMPL"
  cinclude "\"ice_easings.h\""
]]
global ICE_EASINGS_PI: float64 <comptime> = 3.14159265358979323846
global function ice_easings_linear_none(t: float64, b: float64, c: float64, d: float64): float64 <cimport, nodecl> end
global function ice_easings_linear_in(t: float64, b: float64, c: float64, d: float64): float64 <cimport, nodecl> end
global function ice_easings_linear_out(t: float64, b: float64, c: float64, d: float64): float64 <cimport, nodecl> end
global function ice_easings_linear_in_out(t: float64, b: float64, c: float64, d: float64): float64 <cimport, nodecl> end
global function ice_easings_sine_in(t: float64, b: float64, c: float64, d: float64): float64 <cimport, nodecl> end
global function ice_easings_sine_out(t: float64, b: float64, c: float64, d: float64): float64 <cimport, nodecl> end
global function ice_easings_sine_in_out(t: float64, b: float64, c: float64, d: float64): float64 <cimport, nodecl> end
global function ice_easings_cubic_in(t: float64, b: float64, c: float64, d: float64): float64 <cimport, nodecl> end
global function ice_easings_cubic_out(t: float64, b: float64, c: float64, d: float64): float64 <cimport, nodecl> end
global function ice_easings_cubic_in_out(t: float64, b: float64, c: float64, d: float64): float64 <cimport, nodecl> end
global function ice_easings_quint_in(t: float64, b: float64, c: float64, d: float64): float64 <cimport, nodecl> end
global function ice_easings_quint_out(t: float64, b: float64, c: float64, d: float64): float64 <cimport, nodecl> end
global function ice_easings_quint_in_out(t: float64, b: float64, c: float64, d: float64): float64 <cimport, nodecl> end
global function ice_easings_circ_in(t: float64, b: float64, c: float64, d: float64): float64 <cimport, nodecl> end
global function ice_easings_circ_out(t: float64, b: float64, c: float64, d: float64): float64 <cimport, nodecl> end
global function ice_easings_circ_in_out(t: float64, b: float64, c: float64, d: float64): float64 <cimport, nodecl> end
global function ice_easings_elastic_in(t: float64, b: float64, c: float64, d: float64): float64 <cimport, nodecl> end
global function ice_easings_elastic_out(t: float64, b: float64, c: float64, d: float64): float64 <cimport, nodecl> end
global function ice_easings_elastic_in_out(t: float64, b: float64, c: float64, d: float64): float64 <cimport, nodecl> end
global function ice_easings_quad_in(t: float64, b: float64, c: float64, d: float64): float64 <cimport, nodecl> end
global function ice_easings_quad_out(t: float64, b: float64, c: float64, d: float64): float64 <cimport, nodecl> end
global function ice_easings_quad_in_out(t: float64, b: float64, c: float64, d: float64): float64 <cimport, nodecl> end
global function ice_easings_quart_in(t: float64, b: float64, c: float64, d: float64): float64 <cimport, nodecl> end
global function ice_easings_quart_out(t: float64, b: float64, c: float64, d: float64): float64 <cimport, nodecl> end
global function ice_easings_quart_in_out(t: float64, b: float64, c: float64, d: float64): float64 <cimport, nodecl> end
global function ice_easings_expo_in(t: float64, b: float64, c: float64, d: float64): float64 <cimport, nodecl> end
global function ice_easings_expo_out(t: float64, b: float64, c: float64, d: float64): float64 <cimport, nodecl> end
global function ice_easings_expo_in_out(t: float64, b: float64, c: float64, d: float64): float64 <cimport, nodecl> end
global function ice_easings_back_in(t: float64, b: float64, c: float64, d: float64): float64 <cimport, nodecl> end
global function ice_easings_back_out(t: float64, b: float64, c: float64, d: float64): float64 <cimport, nodecl> end
global function ice_easings_back_in_out(t: float64, b: float64, c: float64, d: float64): float64 <cimport, nodecl> end
global function ice_easings_bounce_in(t: float64, b: float64, c: float64, d: float64): float64 <cimport, nodecl> end
global function ice_easings_bounce_out(t: float64, b: float64, c: float64, d: float64): float64 <cimport, nodecl> end
global function ice_easings_bounce_in_out(t: float64, b: float64, c: float64, d: float64): float64 <cimport, nodecl> end
