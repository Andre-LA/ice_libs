##[[
  cdefine "ICE_TIME_IMPL"
  cinclude "ice_time.h"
  
  if ccinfo.is_winphone then
    linklib "WindowsPhoneCore"
  elseif ccinfo.is_windows then
    linklib "kernel32"
  elseif ccinfo.is_linux or ccinfo.is_linux or ccinfo.is_bsd or ccinfo.is_blackberry then
    linklib "c"
  elseif ccinfo.is_3ds then
    linklib "ctru"
  elseif ccinfo.is_rpi2040 then
    linklib "pico_time"
    linklib "pico_util"
    linklib "hardware_timer"
    linklib "hardware_rtc"
  end
]]

-- ============================== Data Types ============================== --

-- Typedef for very unsigned long integers
global ice_time_ulong: type <cimport, nodecl> = @culong

-- Enumeration for week days
global ice_time_day: type <cimport, nodecl, using> = @enum(cint) {
  ICE_TIME_DAY_UNKNOWN = 0,
  ICE_TIME_DAY_SUNDAY,
  ICE_TIME_DAY_MONDAY,
  ICE_TIME_DAY_TUESDAY,
  ICE_TIME_DAY_WEDNESDAY,
  ICE_TIME_DAY_THURSDAY,
  ICE_TIME_DAY_FRIDAY,
  ICE_TIME_DAY_SATURDAY
}

-- Enumeration for year months
global ice_time_month: type <cimport, nodecl, using> = @enum(cint) {
  ICE_TIME_MONTH_UNKNOWN = 0,
  ICE_TIME_MONTH_JANUARY,
  ICE_TIME_MONTH_FEBRUARY,
  ICE_TIME_MONTH_MARCH,
  ICE_TIME_MONTH_APRIL,
  ICE_TIME_MONTH_MAY,
  ICE_TIME_MONTH_JUNE,
  ICE_TIME_MONTH_JULY,
  ICE_TIME_MONTH_AUGUST,
  ICE_TIME_MONTH_SEPTEMBER,
  ICE_TIME_MONTH_OCTOBER,
  ICE_TIME_MONTH_NOVEMBER,
  ICE_TIME_MONTH_DECEMBER
}

-- Enumeration for seasons
global ice_time_season: type <cimport, nodecl, using> = @enum(cint) {
  ICE_TIME_SEASON_UNKNOWN = 0,
  ICE_TIME_SEASON_WINTER,
  ICE_TIME_SEASON_SPRING,
  ICE_TIME_SEASON_SUMMER,
  ICE_TIME_SEASON_AUTUMN
}

-- Struct that contains patched current time info, Including ticks
global ice_time_info: type <cimport, nodecl> = @record {
  str: cstring,                     -- Time as string
  clock_ticks: ice_time_ulong,      -- Clock Ticks (Nanoseconds)
  uptime: ice_time_ulong,           -- Ticks since system started (Milliseconds)
  epoch: ice_time_ulong,            -- Unix timestamp
  seconds: cuint,
  minutes: cuint,
  hour: cuint,
  week_day: ice_time_day,           -- (ICE_TIME_DAY_SUNDAY - ICE_TIME_DAY_SATURDAY)
  month_day: cuint,                 -- (1 - Month last day number)
  year_day: cuint,                  -- (1 - 365)
  month: ice_time_month,            -- (ICE_TIME_MONTH_JANUARY - ICE_TIME_MONTH_DECEMBER)
  season: ice_time_season,          -- (ICE_TIME_SEASON_WINTER - ICE_TIME_SEASON_AUTUMN)
  year: cuint
}

-- Enumeration for errors that may occur
global ice_time_error: type <cimport, nodecl, using> = @enum(cint) {
  ICE_TIME_ERROR_OK = 0,            -- OK - no errors
  ICE_TIME_ERROR_UNKNOWN_TIME,      -- Occurs when time() function fails
  ICE_TIME_ERROR_UNKNOWN_CLOCK,     -- Occurs when clock_gettime() function fails (Linux/Unix only)
  ICE_TIME_ERROR_SYSCALL_FAILURE,   -- Occurs when platform-specific call fails
  ICE_TIME_ERROR_INVALID_POINTER    -- Occurs when passing NULL (Zero) as argument to ice_time_get_info()
}

-- ============================== Functions ============================== --

-- Returns difference between 2 clock ticks, Each one can be acquired from the pointer to ice_time_info struct
global function ice_time_diff(t1: *ice_time_info <const>, t2: *ice_time_info <const>): ice_time_ulong <cimport, nodecl> end

-- Returns difference between clock tick of current time and clock time of specific time, t is passed as pointer to ice_time_info struct for the specific time
global function ice_time_since(t: *ice_time_info <const>): ice_time_ulong <cimport, nodecl> end

-- Returns Delta Time between 2 clock ticks, Each one can be acquired from the pointer to ice_time_info struct
global function ice_time_dt(t1: *ice_time_info <const>, t2: *ice_time_info <const>): float64 <cimport, nodecl> end

-- Retrieves current time info (eg. Ticks, Seconds, Days, Months, Year, Month, etc...) and stores info in ice_time_info struct by pointing to, Returns ICE_TIME_ERROR_OK on success or any other values from ice_time_error enum on failure!
global function ice_time_get_info(time_info: *ice_time_info): ice_time_error <cimport, nodecl> end

-- Sleeps thread/program for Milliseconds
global function ice_time_sleep(ms: ice_time_ulong): void <cimport, nodecl> end

-- Converts: Attoseconds -> Nanoseconds
global function ice_time_as_to_ns(as: ice_time_ulong): float64 <cimport, nodecl> end

-- Converts: Attoseconds -> Microseconds
global function ice_time_as_to_us(as: ice_time_ulong): float64 <cimport, nodecl> end

-- Converts: Attoseconds -> Milliseconds
global function ice_time_as_to_ms(as: ice_time_ulong): float64 <cimport, nodecl> end

-- Converts: Attoseconds -> Seconds
global function ice_time_as_to_sec(as: ice_time_ulong): float64 <cimport, nodecl> end

-- Converts: Nanoseconds -> Attoseconds
global function ice_time_ns_to_as(ns: ice_time_ulong): float64 <cimport, nodecl> end

-- Converts: Nanoseconds -> Microseconds
global function ice_time_ns_to_us(ns: ice_time_ulong): float64 <cimport, nodecl> end

-- Converts: Nanoseconds -> Milliseconds
global function ice_time_ns_to_ms(ns: ice_time_ulong): float64 <cimport, nodecl> end

-- Converts: Nanoseconds -> Seconds
global function ice_time_ns_to_sec(ns: ice_time_ulong): float64 <cimport, nodecl> end

-- Converts: Microseconds -> Attoseconds
global function ice_time_us_to_as(us: ice_time_ulong): float64 <cimport, nodecl> end

-- Converts: Microseconds -> Nanoseconds
global function ice_time_us_to_ns(us: ice_time_ulong): float64 <cimport, nodecl> end

-- Converts: Microseconds -> Milliseconds
global function ice_time_us_to_ms(us: ice_time_ulong): float64 <cimport, nodecl> end

-- Converts: Microseconds -> Seconds
global function ice_time_us_to_sec(us: ice_time_ulong): float64 <cimport, nodecl> end

-- Converts: Milliseconds -> Attoseconds
global function ice_time_ms_to_as(ms: ice_time_ulong): float64 <cimport, nodecl> end

-- Converts: Milliseconds -> Nanoseconds
global function ice_time_ms_to_ns(ms: ice_time_ulong): float64 <cimport, nodecl> end

-- Converts: Milliseconds -> Microseconds
global function ice_time_ms_to_us(ms: ice_time_ulong): float64 <cimport, nodecl> end

-- Converts: Milliseconds -> Seconds
global function ice_time_ms_to_sec(ms: ice_time_ulong): float64 <cimport, nodecl> end

-- Converts: Seconds -> Attoseconds
global function ice_time_sec_to_as(sec: ice_time_ulong): float64 <cimport, nodecl> end

-- Converts: Seconds -> Nanoseconds
global function ice_time_sec_to_ns(sec: ice_time_ulong): float64 <cimport, nodecl> end

-- Converts: Seconds -> Microseconds
global function ice_time_sec_to_us(sec: ice_time_ulong): float64 <cimport, nodecl> end

-- Converts: Seconds -> Milliseconds
global function ice_time_sec_to_ms(sec: ice_time_ulong): float64 <cimport, nodecl> end
