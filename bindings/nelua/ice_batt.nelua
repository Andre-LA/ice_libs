##[[
  cdefine "ICE_BATT_IMPL"
  cinclude "ice_batt.h"
  
  if ccinfo.is_windows then
    if not ccinfo.is_msc then
      linklib "kernel32"
    end
  elseif ccinfo.is_macos then
    cflags "-framework Foundation -framework CoreFoundation -framework IOKit"
  elseif ccinfo.is_ios then
    cflags "-framework Foundation -framework UIKit"
  elseif ccinfo.is_linux or ccinfo.is_bsd then
    linklib "c"
  elseif ccinfo.is_bb10 then
    linklib "bbdevice"
  elseif ccinfo.is_switch then
    linklib "nx"
  elseif ccinfo.is_psp then
    linklib "psppower"
    linklib "psppower_driver"
  elseif ccinfo.is_psvita then
    linklib "ScePower_stub"
  end
]]

-- ============================== Data Types ============================== --

-- Boolean Enum, To avoid including stdbool.h
global ice_batt_bool: type <cimport, nodecl, using> = @enum(cint) {
  ICE_BATT_FALSE = -1,
  ICE_BATT_TRUE = 0
}

-- Struct that contains battery status (Exists?, Charging?, Battery Level)
global ice_batt_info: type <cimport, nodecl> = @record {
  exists: ice_batt_bool,
  charging: ice_batt_bool,
  level: cuint
}

-- Enumeration for errors that may occur
global ice_batt_error: type <cimport, nodecl, using> = @enum(cint) {
  ICE_BATT_ERROR_OK = 0,            -- OK - no errors
  ICE_BATT_ERROR_UNKNOWN_STATUS,    -- Occurs when failed to get battery status, Or if battery status is undefined, Or device doesn't have battery
  ICE_BATT_ERROR_SYSCALL_FAILURE,   -- Occurs when platform-specific function fails
  ICE_BATT_ERROR_INVALID_POINTER    -- Occurs when passing NULL (Zero) as argument to ice_batt_get_info()
}

-- ============================== Functions ============================== --

## if ccinfo.is_android then
-- [ANDROID-ONLY, REQUIRED] Sets native activity to be used by ice_batt on Android, This Should be called first before other ice_batt.h functions
global function ice_batt_use_native_activity(activity: pointer): void <cimport, nodecl> end
## end

-- Fetches battery info and stores info into ice_batt_info struct by pointing to, Returns ICE_BATT_ERROR_OK on success or any other values from ice_batt_error enum on failure!
global function ice_batt_get_info(batt_info: *ice_batt_info): ice_batt_error <cimport, nodecl> end
