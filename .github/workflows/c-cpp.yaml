name: Build (GNU GCC/C++)

on:
  push:
    branches:
      - 'dev'
  pull_request:
    branches:
      - 'dev'

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-latest, windows-latest, macOS-latest ]
        lib: [ ice_cpu ]
        def: [ ICE_CPU_IMPL ]
    
    steps:
    - name: Build - Microsoft Windows
      shell: bash
      if: matrix.os == 'windows-latest'
      run: |
        mkdir -p build
        yes | cp -r ${{runner.workspace}}/rebase/${{ matrix.lib }}.h ${{runner.workspace}}/build/${{ matrix.lib }}.h
        echo '#define ${{ matrix.def }}\n#include "${{ matrix.lib }}.h"\n' > ${{runner.workspace}}/build/${{ matrix.lib }}.c
        gcc -shared ${{runner.workspace}}/build/${{ matrix.lib }}.c -o ${{runner.workspace}}/build/${{ matrix.lib }}.dll
        rm -f ${{runner.workspace}}/build/*.c ${{runner.workspace}}/build/*.h
      
    - name: Build - Linux (Ubuntu)
      shell: bash
      if: matrix.os == 'ubuntu-latest'
      run: |
        mkdir -p build
        yes | cp -r ${{runner.workspace}}/rebase/${{ matrix.lib }}.h ${{runner.workspace}}/build/${{ matrix.lib }}.h
        echo '#define ${{ matrix.def }}\n#include "${{ matrix.lib }}.h"\n' > ${{runner.workspace}}/build/${{ matrix.lib }}.c
        gcc -shared ${{runner.workspace}}/build/${{ matrix.lib }}.c -o ${{runner.workspace}}/build/${{ matrix.lib }}.so
        rm -f ${{runner.workspace}}/build/*.c ${{runner.workspace}}/build/*.h
      
    - name: Build - macOS/OSX
      shell: bash
      if: matrix.os == 'macOS-latest'
      run: |
        mkdir -p build
        yes | cp -r ${{runner.workspace}}/rebase/${{ matrix.lib }}.h ${{runner.workspace}}/build/${{ matrix.lib }}.h
        echo '#define ${{ matrix.def }}\n#include "${{ matrix.lib }}.h"\n' > ${{runner.workspace}}/build/${{ matrix.lib }}.c
        gcc -dynamiclib ${{runner.workspace}}/build/${{ matrix.lib }}.c -o ${{runner.workspace}}/build/${{ matrix.lib }}.dylib
        rm -f ${{runner.workspace}}/build/*.c ${{runner.workspace}}/build/*.h
  
  archive-build-artifacts:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-latest, windows-latest, macOS-latest ]
        lib: [ ice_cpu ]
        def: [ ICE_CPU_IMPL ]
    
    steps:
    - name: Artifacts Setup & Update - Microsoft Windows
      if: matrix.os == 'windows-latest'
      shell: bash
      run: |
        mkdir -p downloads
        yes | cp -r ${{runner.workspace}}/build/${{ matrix.lib }}.dll downloads/${{ matrix.lib }}.dll
    
    - name: Artifacts Setup & Update - Linux (Ubuntu)
      shell: bash
      if: matrix.os == 'ubuntu-latest'
      run: |
        mkdir -p downloads
        yes | cp -r ${{runner.workspace}}/build/${{ matrix.lib }}.so downloads/${{ matrix.lib }}.so
    
    - name: Artifacts Setup & Update - macOS/OSX
      shell: bash
      if: matrix.os == 'macOS-latest'
      run: |
        mkdir -p downloads
        yes | cp -r ${{runner.workspace}}/build/${{ matrix.lib }}.dylib downloads/${{ matrix.lib }}.dylib
  
    - name: Artifacts - ${{ matrix.os }}
      uses: actions/upload-artifact@v2
      with: 
          name: assets-for-download
          path: downloads
